
Ana_Kod_5_Mega_Pro_Mini_Vites_Sayacsiz_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00001338  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  0080020c  0080020c  000013d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fc  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3a  00000000  00000000  00002d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097b  00000000  00000000  00003c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  000045d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000861  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001061  00000000  00000000  00005289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000062ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	a9 c6       	rjmp	.+3410   	; 0xd98 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e3       	ldi	r30, 0x38	; 56
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 35       	cpi	r26, 0x5F	; 95
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	30 d6       	rcall	.+3168   	; 0xd80 <main>
     120:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <BrakeLight_Init_Ports>:
		/ (double)SampleTime;
		ki *= ratio;
		kd /= ratio;
		SampleTime = (unsigned long)NewSampleTime;
	}
}
     126:	84 b1       	in	r24, 0x04	; 4
     128:	87 7f       	andi	r24, 0xF7	; 247
     12a:	84 b9       	out	0x04, r24	; 4
     12c:	85 b1       	in	r24, 0x05	; 5
     12e:	88 60       	ori	r24, 0x08	; 8
     130:	85 b9       	out	0x05, r24	; 5
     132:	81 b1       	in	r24, 0x01	; 1
     134:	80 61       	ori	r24, 0x10	; 16
     136:	81 b9       	out	0x01, r24	; 1
     138:	08 95       	ret

0000013a <Ecu_Throttle_Init_Ports>:
     13a:	84 b1       	in	r24, 0x04	; 4
     13c:	80 61       	ori	r24, 0x10	; 16
     13e:	84 b9       	out	0x04, r24	; 4
     140:	08 95       	ret

00000142 <Brake_Light>:
     142:	1b 99       	sbic	0x03, 3	; 3
     144:	04 c0       	rjmp	.+8      	; 0x14e <Brake_Light+0xc>
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
     14c:	02 c0       	rjmp	.+4      	; 0x152 <Brake_Light+0x10>
     14e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
     152:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	21 f4       	brne	.+8      	; 0x162 <Brake_Light+0x20>
     15a:	82 b1       	in	r24, 0x02	; 2
     15c:	80 61       	ori	r24, 0x10	; 16
     15e:	82 b9       	out	0x02, r24	; 2
     160:	08 95       	ret
     162:	82 b1       	in	r24, 0x02	; 2
     164:	8f 7e       	andi	r24, 0xEF	; 239
     166:	82 b9       	out	0x02, r24	; 2
     168:	08 95       	ret

0000016a <Compute>:
     16a:	2f 92       	push	r2
     16c:	3f 92       	push	r3
     16e:	4f 92       	push	r4
     170:	5f 92       	push	r5
     172:	6f 92       	push	r6
     174:	7f 92       	push	r7
     176:	8f 92       	push	r8
     178:	9f 92       	push	r9
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	2e 97       	sbiw	r28, 0x0e	; 14
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <inAuto>
     1a2:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <inAuto+0x1>
     1a6:	00 97       	sbiw	r24, 0x00	; 0
     1a8:	09 f4       	brne	.+2      	; 0x1ac <Compute+0x42>
     1aa:	47 c1       	rjmp	.+654    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     1ac:	32 d6       	rcall	.+3172   	; 0xe12 <millis>
     1ae:	6b 01       	movw	r12, r22
     1b0:	7c 01       	movw	r14, r24
     1b2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <lastTime>
     1b6:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <lastTime+0x1>
     1ba:	a0 91 37 02 	lds	r26, 0x0237	; 0x800237 <lastTime+0x2>
     1be:	b0 91 38 02 	lds	r27, 0x0238	; 0x800238 <lastTime+0x3>
     1c2:	b7 01       	movw	r22, r14
     1c4:	a6 01       	movw	r20, r12
     1c6:	48 1b       	sub	r20, r24
     1c8:	59 0b       	sbc	r21, r25
     1ca:	6a 0b       	sbc	r22, r26
     1cc:	7b 0b       	sbc	r23, r27
     1ce:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <SampleTime>
     1d2:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <SampleTime+0x1>
     1d6:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <SampleTime+0x2>
     1da:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <SampleTime+0x3>
     1de:	48 17       	cp	r20, r24
     1e0:	59 07       	cpc	r21, r25
     1e2:	6a 07       	cpc	r22, r26
     1e4:	7b 07       	cpc	r23, r27
     1e6:	08 f4       	brcc	.+2      	; 0x1ea <Compute+0x80>
     1e8:	26 c1       	rjmp	.+588    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     1ea:	80 90 47 02 	lds	r8, 0x0247	; 0x800247 <Input>
     1ee:	90 90 48 02 	lds	r9, 0x0248	; 0x800248 <Input+0x1>
     1f2:	a0 90 49 02 	lds	r10, 0x0249	; 0x800249 <Input+0x2>
     1f6:	b0 90 4a 02 	lds	r11, 0x024A	; 0x80024a <Input+0x3>
     1fa:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <Setpoint>
     1fe:	70 91 1c 02 	lds	r23, 0x021C	; 0x80021c <Setpoint+0x1>
     202:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Setpoint+0x2>
     206:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Setpoint+0x3>
     20a:	a5 01       	movw	r20, r10
     20c:	94 01       	movw	r18, r8
     20e:	11 d6       	rcall	.+3106   	; 0xe32 <__subsf3>
     210:	69 83       	std	Y+1, r22	; 0x01
     212:	7a 83       	std	Y+2, r23	; 0x02
     214:	8b 83       	std	Y+3, r24	; 0x03
     216:	9c 83       	std	Y+4, r25	; 0x04
     218:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <lastInput>
     21c:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <lastInput+0x1>
     220:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <lastInput+0x2>
     224:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <lastInput+0x3>
     228:	c5 01       	movw	r24, r10
     22a:	b4 01       	movw	r22, r8
     22c:	02 d6       	rcall	.+3076   	; 0xe32 <__subsf3>
     22e:	6d 83       	std	Y+5, r22	; 0x05
     230:	7e 83       	std	Y+6, r23	; 0x06
     232:	8f 83       	std	Y+7, r24	; 0x07
     234:	98 87       	std	Y+8, r25	; 0x08
     236:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <ki>
     23a:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <ki+0x1>
     23e:	40 91 31 02 	lds	r20, 0x0231	; 0x800231 <ki+0x2>
     242:	50 91 32 02 	lds	r21, 0x0232	; 0x800232 <ki+0x3>
     246:	69 81       	ldd	r22, Y+1	; 0x01
     248:	7a 81       	ldd	r23, Y+2	; 0x02
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	9c 81       	ldd	r25, Y+4	; 0x04
     24e:	a9 d7       	rcall	.+3922   	; 0x11a2 <__mulsf3>
     250:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <outputSum>
     254:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <outputSum+0x1>
     258:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <outputSum+0x2>
     25c:	50 91 46 02 	lds	r21, 0x0246	; 0x800246 <outputSum+0x3>
     260:	e9 d5       	rcall	.+3026   	; 0xe34 <__addsf3>
     262:	2b 01       	movw	r4, r22
     264:	3c 01       	movw	r6, r24
     266:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <outputSum>
     26a:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <outputSum+0x1>
     26e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <outputSum+0x2>
     272:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <outputSum+0x3>
     276:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <pOnE>
     27a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <pOnE+0x1>
     27e:	9e 87       	std	Y+14, r25	; 0x0e
     280:	8d 87       	std	Y+13, r24	; 0x0d
     282:	89 2b       	or	r24, r25
     284:	d1 f4       	brne	.+52     	; 0x2ba <Compute+0x150>
     286:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <kp>
     28a:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <kp+0x1>
     28e:	40 91 51 02 	lds	r20, 0x0251	; 0x800251 <kp+0x2>
     292:	50 91 52 02 	lds	r21, 0x0252	; 0x800252 <kp+0x3>
     296:	6d 81       	ldd	r22, Y+5	; 0x05
     298:	7e 81       	ldd	r23, Y+6	; 0x06
     29a:	8f 81       	ldd	r24, Y+7	; 0x07
     29c:	98 85       	ldd	r25, Y+8	; 0x08
     29e:	81 d7       	rcall	.+3842   	; 0x11a2 <__mulsf3>
     2a0:	9b 01       	movw	r18, r22
     2a2:	ac 01       	movw	r20, r24
     2a4:	c3 01       	movw	r24, r6
     2a6:	b2 01       	movw	r22, r4
     2a8:	c4 d5       	rcall	.+2952   	; 0xe32 <__subsf3>
     2aa:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <outputSum>
     2ae:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <outputSum+0x1>
     2b2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <outputSum+0x2>
     2b6:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <outputSum+0x3>
     2ba:	40 90 43 02 	lds	r4, 0x0243	; 0x800243 <outputSum>
     2be:	50 90 44 02 	lds	r5, 0x0244	; 0x800244 <outputSum+0x1>
     2c2:	60 90 45 02 	lds	r6, 0x0245	; 0x800245 <outputSum+0x2>
     2c6:	70 90 46 02 	lds	r7, 0x0246	; 0x800246 <outputSum+0x3>
     2ca:	30 90 13 02 	lds	r3, 0x0213	; 0x800213 <outMax>
     2ce:	20 90 14 02 	lds	r2, 0x0214	; 0x800214 <outMax+0x1>
     2d2:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <outMax+0x2>
     2d6:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <outMax+0x3>
     2da:	23 2d       	mov	r18, r3
     2dc:	32 2d       	mov	r19, r2
     2de:	40 2f       	mov	r20, r16
     2e0:	51 2f       	mov	r21, r17
     2e2:	c3 01       	movw	r24, r6
     2e4:	b2 01       	movw	r22, r4
     2e6:	59 d7       	rcall	.+3762   	; 0x119a <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	6c f4       	brge	.+26     	; 0x306 <Compute+0x19c>
     2ec:	83 2d       	mov	r24, r3
     2ee:	92 2d       	mov	r25, r2
     2f0:	a0 2f       	mov	r26, r16
     2f2:	b1 2f       	mov	r27, r17
     2f4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <outputSum>
     2f8:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <outputSum+0x1>
     2fc:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <outputSum+0x2>
     300:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <outputSum+0x3>
     304:	1f c0       	rjmp	.+62     	; 0x344 <Compute+0x1da>
     306:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <outMin>
     30a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <outMin+0x1>
     30e:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <outMin+0x2>
     312:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <outMin+0x3>
     316:	89 87       	std	Y+9, r24	; 0x09
     318:	9a 87       	std	Y+10, r25	; 0x0a
     31a:	ab 87       	std	Y+11, r26	; 0x0b
     31c:	bc 87       	std	Y+12, r27	; 0x0c
     31e:	9c 01       	movw	r18, r24
     320:	ad 01       	movw	r20, r26
     322:	c3 01       	movw	r24, r6
     324:	b2 01       	movw	r22, r4
     326:	ea d5       	rcall	.+3028   	; 0xefc <__cmpsf2>
     328:	88 23       	and	r24, r24
     32a:	64 f4       	brge	.+24     	; 0x344 <Compute+0x1da>
     32c:	89 85       	ldd	r24, Y+9	; 0x09
     32e:	9a 85       	ldd	r25, Y+10	; 0x0a
     330:	ab 85       	ldd	r26, Y+11	; 0x0b
     332:	bc 85       	ldd	r27, Y+12	; 0x0c
     334:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <outputSum>
     338:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <outputSum+0x1>
     33c:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <outputSum+0x2>
     340:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <outputSum+0x3>
     344:	ad 85       	ldd	r26, Y+13	; 0x0d
     346:	be 85       	ldd	r27, Y+14	; 0x0e
     348:	ab 2b       	or	r26, r27
     34a:	81 f0       	breq	.+32     	; 0x36c <Compute+0x202>
     34c:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <kp>
     350:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <kp+0x1>
     354:	40 91 51 02 	lds	r20, 0x0251	; 0x800251 <kp+0x2>
     358:	50 91 52 02 	lds	r21, 0x0252	; 0x800252 <kp+0x3>
     35c:	69 81       	ldd	r22, Y+1	; 0x01
     35e:	7a 81       	ldd	r23, Y+2	; 0x02
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	9c 81       	ldd	r25, Y+4	; 0x04
     364:	1e d7       	rcall	.+3644   	; 0x11a2 <__mulsf3>
     366:	2b 01       	movw	r4, r22
     368:	3c 01       	movw	r6, r24
     36a:	03 c0       	rjmp	.+6      	; 0x372 <Compute+0x208>
     36c:	41 2c       	mov	r4, r1
     36e:	51 2c       	mov	r5, r1
     370:	32 01       	movw	r6, r4
     372:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <kd>
     376:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <kd+0x1>
     37a:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <kd+0x2>
     37e:	50 91 12 02 	lds	r21, 0x0212	; 0x800212 <kd+0x3>
     382:	6d 81       	ldd	r22, Y+5	; 0x05
     384:	7e 81       	ldd	r23, Y+6	; 0x06
     386:	8f 81       	ldd	r24, Y+7	; 0x07
     388:	98 85       	ldd	r25, Y+8	; 0x08
     38a:	0b d7       	rcall	.+3606   	; 0x11a2 <__mulsf3>
     38c:	9b 01       	movw	r18, r22
     38e:	ac 01       	movw	r20, r24
     390:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <outputSum>
     394:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <outputSum+0x1>
     398:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <outputSum+0x2>
     39c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <outputSum+0x3>
     3a0:	48 d5       	rcall	.+2704   	; 0xe32 <__subsf3>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	c3 01       	movw	r24, r6
     3a8:	b2 01       	movw	r22, r4
     3aa:	44 d5       	rcall	.+2696   	; 0xe34 <__addsf3>
     3ac:	66 2e       	mov	r6, r22
     3ae:	7d 83       	std	Y+5, r23	; 0x05
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	79 2e       	mov	r7, r25
     3b4:	26 2f       	mov	r18, r22
     3b6:	37 2f       	mov	r19, r23
     3b8:	48 2f       	mov	r20, r24
     3ba:	59 2f       	mov	r21, r25
     3bc:	63 2d       	mov	r22, r3
     3be:	72 2d       	mov	r23, r2
     3c0:	80 2f       	mov	r24, r16
     3c2:	91 2f       	mov	r25, r17
     3c4:	9b d5       	rcall	.+2870   	; 0xefc <__cmpsf2>
     3c6:	88 23       	and	r24, r24
     3c8:	bc f0       	brlt	.+46     	; 0x3f8 <Compute+0x28e>
     3ca:	30 90 17 02 	lds	r3, 0x0217	; 0x800217 <outMin>
     3ce:	20 90 18 02 	lds	r2, 0x0218	; 0x800218 <outMin+0x1>
     3d2:	00 91 19 02 	lds	r16, 0x0219	; 0x800219 <outMin+0x2>
     3d6:	10 91 1a 02 	lds	r17, 0x021A	; 0x80021a <outMin+0x3>
     3da:	23 2d       	mov	r18, r3
     3dc:	32 2d       	mov	r19, r2
     3de:	40 2f       	mov	r20, r16
     3e0:	51 2f       	mov	r21, r17
     3e2:	66 2d       	mov	r22, r6
     3e4:	7d 81       	ldd	r23, Y+5	; 0x05
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	97 2d       	mov	r25, r7
     3ea:	88 d5       	rcall	.+2832   	; 0xefc <__cmpsf2>
     3ec:	88 23       	and	r24, r24
     3ee:	24 f0       	brlt	.+8      	; 0x3f8 <Compute+0x28e>
     3f0:	36 2c       	mov	r3, r6
     3f2:	2d 80       	ldd	r2, Y+5	; 0x05
     3f4:	09 81       	ldd	r16, Y+1	; 0x01
     3f6:	17 2d       	mov	r17, r7
     3f8:	83 2d       	mov	r24, r3
     3fa:	92 2d       	mov	r25, r2
     3fc:	a0 2f       	mov	r26, r16
     3fe:	b1 2f       	mov	r27, r17
     400:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <Output>
     404:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <Output+0x1>
     408:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <Output+0x2>
     40c:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <Output+0x3>
     410:	80 92 21 02 	sts	0x0221, r8	; 0x800221 <lastInput>
     414:	90 92 22 02 	sts	0x0222, r9	; 0x800222 <lastInput+0x1>
     418:	a0 92 23 02 	sts	0x0223, r10	; 0x800223 <lastInput+0x2>
     41c:	b0 92 24 02 	sts	0x0224, r11	; 0x800224 <lastInput+0x3>
     420:	c0 92 35 02 	sts	0x0235, r12	; 0x800235 <lastTime>
     424:	d0 92 36 02 	sts	0x0236, r13	; 0x800236 <lastTime+0x1>
     428:	e0 92 37 02 	sts	0x0237, r14	; 0x800237 <lastTime+0x2>
     42c:	f0 92 38 02 	sts	0x0238, r15	; 0x800238 <lastTime+0x3>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2e 96       	adiw	r28, 0x0e	; 14
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	9f 90       	pop	r9
     45c:	8f 90       	pop	r8
     45e:	7f 90       	pop	r7
     460:	6f 90       	pop	r6
     462:	5f 90       	pop	r5
     464:	4f 90       	pop	r4
     466:	3f 90       	pop	r3
     468:	2f 90       	pop	r2
     46a:	08 95       	ret

0000046c <SetTunings>:
     46c:	4f 92       	push	r4
     46e:	5f 92       	push	r5
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	00 d0       	rcall	.+0      	; 0x48e <SetTunings+0x22>
     48e:	1f 92       	push	r1
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	4b 01       	movw	r8, r22
     496:	5c 01       	movw	r10, r24
     498:	29 01       	movw	r4, r18
     49a:	3a 01       	movw	r6, r20
     49c:	e9 82       	std	Y+1, r14	; 0x01
     49e:	fa 82       	std	Y+2, r15	; 0x02
     4a0:	0b 83       	std	Y+3, r16	; 0x03
     4a2:	1c 83       	std	Y+4, r17	; 0x04
     4a4:	d0 92 0e 02 	sts	0x020E, r13	; 0x80020e <pOn+0x1>
     4a8:	c0 92 0d 02 	sts	0x020D, r12	; 0x80020d <pOn>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	ca 94       	dec	r12
     4b2:	cd 28       	or	r12, r13
     4b4:	11 f0       	breq	.+4      	; 0x4ba <SetTunings+0x4e>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <pOnE+0x1>
     4be:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <pOnE>
     4c2:	80 92 4b 02 	sts	0x024B, r8	; 0x80024b <dispKp>
     4c6:	90 92 4c 02 	sts	0x024C, r9	; 0x80024c <dispKp+0x1>
     4ca:	a0 92 4d 02 	sts	0x024D, r10	; 0x80024d <dispKp+0x2>
     4ce:	b0 92 4e 02 	sts	0x024E, r11	; 0x80024e <dispKp+0x3>
     4d2:	40 92 39 02 	sts	0x0239, r4	; 0x800239 <dispKi>
     4d6:	50 92 3a 02 	sts	0x023A, r5	; 0x80023a <dispKi+0x1>
     4da:	60 92 3b 02 	sts	0x023B, r6	; 0x80023b <dispKi+0x2>
     4de:	70 92 3c 02 	sts	0x023C, r7	; 0x80023c <dispKi+0x3>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	ab 81       	ldd	r26, Y+3	; 0x03
     4e8:	bc 81       	ldd	r27, Y+4	; 0x04
     4ea:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <dispKd>
     4ee:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <dispKd+0x1>
     4f2:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <dispKd+0x2>
     4f6:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <dispKd+0x3>
     4fa:	60 91 55 02 	lds	r22, 0x0255	; 0x800255 <SampleTime>
     4fe:	70 91 56 02 	lds	r23, 0x0256	; 0x800256 <SampleTime+0x1>
     502:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <SampleTime+0x2>
     506:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <SampleTime+0x3>
     50a:	95 d5       	rcall	.+2858   	; 0x1036 <__floatunsisf>
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4a e7       	ldi	r20, 0x7A	; 122
     512:	54 e4       	ldi	r21, 0x44	; 68
     514:	f7 d4       	rcall	.+2542   	; 0xf04 <__divsf3>
     516:	6b 01       	movw	r12, r22
     518:	7c 01       	movw	r14, r24
     51a:	80 92 4f 02 	sts	0x024F, r8	; 0x80024f <kp>
     51e:	90 92 50 02 	sts	0x0250, r9	; 0x800250 <kp+0x1>
     522:	a0 92 51 02 	sts	0x0251, r10	; 0x800251 <kp+0x2>
     526:	b0 92 52 02 	sts	0x0252, r11	; 0x800252 <kp+0x3>
     52a:	9b 01       	movw	r18, r22
     52c:	ac 01       	movw	r20, r24
     52e:	c3 01       	movw	r24, r6
     530:	b2 01       	movw	r22, r4
     532:	37 d6       	rcall	.+3182   	; 0x11a2 <__mulsf3>
     534:	2b 01       	movw	r4, r22
     536:	3c 01       	movw	r6, r24
     538:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <ki>
     53c:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <ki+0x1>
     540:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ki+0x2>
     544:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ki+0x3>
     548:	a7 01       	movw	r20, r14
     54a:	96 01       	movw	r18, r12
     54c:	69 81       	ldd	r22, Y+1	; 0x01
     54e:	7a 81       	ldd	r23, Y+2	; 0x02
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	d7 d4       	rcall	.+2478   	; 0xf04 <__divsf3>
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24
     55a:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <kd>
     55e:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <kd+0x1>
     562:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <kd+0x2>
     566:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <kd+0x3>
     56a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <controllerDirection>
     56e:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <controllerDirection+0x1>
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	51 f5       	brne	.+84     	; 0x5ca <SetTunings+0x15e>
     576:	a5 01       	movw	r20, r10
     578:	94 01       	movw	r18, r8
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	cb 01       	movw	r24, r22
     580:	58 d4       	rcall	.+2224   	; 0xe32 <__subsf3>
     582:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <kp>
     586:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <kp+0x1>
     58a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <kp+0x2>
     58e:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <kp+0x3>
     592:	a3 01       	movw	r20, r6
     594:	92 01       	movw	r18, r4
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	cb 01       	movw	r24, r22
     59c:	4a d4       	rcall	.+2196   	; 0xe32 <__subsf3>
     59e:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <ki>
     5a2:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <ki+0x1>
     5a6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ki+0x2>
     5aa:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ki+0x3>
     5ae:	a7 01       	movw	r20, r14
     5b0:	96 01       	movw	r18, r12
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	cb 01       	movw	r24, r22
     5b8:	3c d4       	rcall	.+2168   	; 0xe32 <__subsf3>
     5ba:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <kd>
     5be:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <kd+0x1>
     5c2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <kd+0x2>
     5c6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <kd+0x3>
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	9f 90       	pop	r9
     5e8:	8f 90       	pop	r8
     5ea:	7f 90       	pop	r7
     5ec:	6f 90       	pop	r6
     5ee:	5f 90       	pop	r5
     5f0:	4f 90       	pop	r4
     5f2:	08 95       	ret

000005f4 <SetOutputLimits>:

void SetOutputLimits(double Min, double Max)
{
     5f4:	4f 92       	push	r4
     5f6:	5f 92       	push	r5
     5f8:	6f 92       	push	r6
     5fa:	7f 92       	push	r7
     5fc:	8f 92       	push	r8
     5fe:	9f 92       	push	r9
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	4b 01       	movw	r8, r22
     60e:	5c 01       	movw	r10, r24
     610:	69 01       	movw	r12, r18
     612:	7a 01       	movw	r14, r20
	if(Min >= Max)return;
     614:	c2 d5       	rcall	.+2948   	; 0x119a <__gesf2>
     616:	88 23       	and	r24, r24
     618:	0c f0       	brlt	.+2      	; 0x61c <SetOutputLimits+0x28>
     61a:	65 c0       	rjmp	.+202    	; 0x6e6 <SetOutputLimits+0xf2>
	outMin = Min;
     61c:	80 92 17 02 	sts	0x0217, r8	; 0x800217 <outMin>
     620:	90 92 18 02 	sts	0x0218, r9	; 0x800218 <outMin+0x1>
     624:	a0 92 19 02 	sts	0x0219, r10	; 0x800219 <outMin+0x2>
     628:	b0 92 1a 02 	sts	0x021A, r11	; 0x80021a <outMin+0x3>
	outMax = Max;
     62c:	c0 92 13 02 	sts	0x0213, r12	; 0x800213 <outMax>
     630:	d0 92 14 02 	sts	0x0214, r13	; 0x800214 <outMax+0x1>
     634:	e0 92 15 02 	sts	0x0215, r14	; 0x800215 <outMax+0x2>
     638:	f0 92 16 02 	sts	0x0216, r15	; 0x800216 <outMax+0x3>
	
	if(inAuto)
     63c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <inAuto>
     640:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <inAuto+0x1>
     644:	89 2b       	or	r24, r25
     646:	09 f4       	brne	.+2      	; 0x64a <SetOutputLimits+0x56>
     648:	4e c0       	rjmp	.+156    	; 0x6e6 <SetOutputLimits+0xf2>
	{
		if(Output > outMax) Output = outMax;
     64a:	40 90 25 02 	lds	r4, 0x0225	; 0x800225 <Output>
     64e:	50 90 26 02 	lds	r5, 0x0226	; 0x800226 <Output+0x1>
     652:	60 90 27 02 	lds	r6, 0x0227	; 0x800227 <Output+0x2>
     656:	70 90 28 02 	lds	r7, 0x0228	; 0x800228 <Output+0x3>
     65a:	a3 01       	movw	r20, r6
     65c:	92 01       	movw	r18, r4
     65e:	c7 01       	movw	r24, r14
     660:	b6 01       	movw	r22, r12
     662:	4c d4       	rcall	.+2200   	; 0xefc <__cmpsf2>
     664:	88 23       	and	r24, r24
     666:	4c f4       	brge	.+18     	; 0x67a <SetOutputLimits+0x86>
     668:	c0 92 25 02 	sts	0x0225, r12	; 0x800225 <Output>
     66c:	d0 92 26 02 	sts	0x0226, r13	; 0x800226 <Output+0x1>
     670:	e0 92 27 02 	sts	0x0227, r14	; 0x800227 <Output+0x2>
     674:	f0 92 28 02 	sts	0x0228, r15	; 0x800228 <Output+0x3>
     678:	0f c0       	rjmp	.+30     	; 0x698 <SetOutputLimits+0xa4>
		else if(Output < outMin) Output = outMin;
     67a:	a3 01       	movw	r20, r6
     67c:	92 01       	movw	r18, r4
     67e:	c5 01       	movw	r24, r10
     680:	b4 01       	movw	r22, r8
     682:	8b d5       	rcall	.+2838   	; 0x119a <__gesf2>
     684:	18 16       	cp	r1, r24
     686:	44 f4       	brge	.+16     	; 0x698 <SetOutputLimits+0xa4>
     688:	80 92 25 02 	sts	0x0225, r8	; 0x800225 <Output>
     68c:	90 92 26 02 	sts	0x0226, r9	; 0x800226 <Output+0x1>
     690:	a0 92 27 02 	sts	0x0227, r10	; 0x800227 <Output+0x2>
     694:	b0 92 28 02 	sts	0x0228, r11	; 0x800228 <Output+0x3>

		if(outputSum > outMax) outputSum= outMax;
     698:	40 90 43 02 	lds	r4, 0x0243	; 0x800243 <outputSum>
     69c:	50 90 44 02 	lds	r5, 0x0244	; 0x800244 <outputSum+0x1>
     6a0:	60 90 45 02 	lds	r6, 0x0245	; 0x800245 <outputSum+0x2>
     6a4:	70 90 46 02 	lds	r7, 0x0246	; 0x800246 <outputSum+0x3>
     6a8:	a3 01       	movw	r20, r6
     6aa:	92 01       	movw	r18, r4
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	25 d4       	rcall	.+2122   	; 0xefc <__cmpsf2>
     6b2:	88 23       	and	r24, r24
     6b4:	4c f4       	brge	.+18     	; 0x6c8 <SetOutputLimits+0xd4>
     6b6:	c0 92 43 02 	sts	0x0243, r12	; 0x800243 <outputSum>
     6ba:	d0 92 44 02 	sts	0x0244, r13	; 0x800244 <outputSum+0x1>
     6be:	e0 92 45 02 	sts	0x0245, r14	; 0x800245 <outputSum+0x2>
     6c2:	f0 92 46 02 	sts	0x0246, r15	; 0x800246 <outputSum+0x3>
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <SetOutputLimits+0xf2>
		else if(outputSum < outMin) outputSum= outMin;
     6c8:	a3 01       	movw	r20, r6
     6ca:	92 01       	movw	r18, r4
     6cc:	c5 01       	movw	r24, r10
     6ce:	b4 01       	movw	r22, r8
     6d0:	64 d5       	rcall	.+2760   	; 0x119a <__gesf2>
     6d2:	18 16       	cp	r1, r24
     6d4:	44 f4       	brge	.+16     	; 0x6e6 <SetOutputLimits+0xf2>
     6d6:	80 92 43 02 	sts	0x0243, r8	; 0x800243 <outputSum>
     6da:	90 92 44 02 	sts	0x0244, r9	; 0x800244 <outputSum+0x1>
     6de:	a0 92 45 02 	sts	0x0245, r10	; 0x800245 <outputSum+0x2>
     6e2:	b0 92 46 02 	sts	0x0246, r11	; 0x800246 <outputSum+0x3>
	}
}
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	7f 90       	pop	r7
     6f8:	6f 90       	pop	r6
     6fa:	5f 90       	pop	r5
     6fc:	4f 90       	pop	r4
     6fe:	08 95       	ret

00000700 <Initalize>:
	}
	inAuto = newAuto;
}

void Initalize()
{
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
	outputSum = Output;
     710:	c0 90 25 02 	lds	r12, 0x0225	; 0x800225 <Output>
     714:	d0 90 26 02 	lds	r13, 0x0226	; 0x800226 <Output+0x1>
     718:	e0 90 27 02 	lds	r14, 0x0227	; 0x800227 <Output+0x2>
     71c:	f0 90 28 02 	lds	r15, 0x0228	; 0x800228 <Output+0x3>
     720:	c0 92 43 02 	sts	0x0243, r12	; 0x800243 <outputSum>
     724:	d0 92 44 02 	sts	0x0244, r13	; 0x800244 <outputSum+0x1>
     728:	e0 92 45 02 	sts	0x0245, r14	; 0x800245 <outputSum+0x2>
     72c:	f0 92 46 02 	sts	0x0246, r15	; 0x800246 <outputSum+0x3>
	lastInput = Input;
     730:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <Input>
     734:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <Input+0x1>
     738:	a0 91 49 02 	lds	r26, 0x0249	; 0x800249 <Input+0x2>
     73c:	b0 91 4a 02 	lds	r27, 0x024A	; 0x80024a <Input+0x3>
     740:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <lastInput>
     744:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <lastInput+0x1>
     748:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <lastInput+0x2>
     74c:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <lastInput+0x3>
	if(outputSum > outMax) outputSum = outMax;
     750:	80 90 13 02 	lds	r8, 0x0213	; 0x800213 <outMax>
     754:	90 90 14 02 	lds	r9, 0x0214	; 0x800214 <outMax+0x1>
     758:	a0 90 15 02 	lds	r10, 0x0215	; 0x800215 <outMax+0x2>
     75c:	b0 90 16 02 	lds	r11, 0x0216	; 0x800216 <outMax+0x3>
     760:	a5 01       	movw	r20, r10
     762:	94 01       	movw	r18, r8
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	18 d5       	rcall	.+2608   	; 0x119a <__gesf2>
     76a:	18 16       	cp	r1, r24
     76c:	4c f4       	brge	.+18     	; 0x780 <Initalize+0x80>
     76e:	80 92 43 02 	sts	0x0243, r8	; 0x800243 <outputSum>
     772:	90 92 44 02 	sts	0x0244, r9	; 0x800244 <outputSum+0x1>
     776:	a0 92 45 02 	sts	0x0245, r10	; 0x800245 <outputSum+0x2>
     77a:	b0 92 46 02 	sts	0x0246, r11	; 0x800246 <outputSum+0x3>
     77e:	17 c0       	rjmp	.+46     	; 0x7ae <Initalize+0xae>
	else if(outputSum < outMin) outputSum = outMin;
     780:	80 90 17 02 	lds	r8, 0x0217	; 0x800217 <outMin>
     784:	90 90 18 02 	lds	r9, 0x0218	; 0x800218 <outMin+0x1>
     788:	a0 90 19 02 	lds	r10, 0x0219	; 0x800219 <outMin+0x2>
     78c:	b0 90 1a 02 	lds	r11, 0x021A	; 0x80021a <outMin+0x3>
     790:	a5 01       	movw	r20, r10
     792:	94 01       	movw	r18, r8
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	b1 d3       	rcall	.+1890   	; 0xefc <__cmpsf2>
     79a:	88 23       	and	r24, r24
     79c:	44 f4       	brge	.+16     	; 0x7ae <Initalize+0xae>
     79e:	80 92 43 02 	sts	0x0243, r8	; 0x800243 <outputSum>
     7a2:	90 92 44 02 	sts	0x0244, r9	; 0x800244 <outputSum+0x1>
     7a6:	a0 92 45 02 	sts	0x0245, r10	; 0x800245 <outputSum+0x2>
     7aa:	b0 92 46 02 	sts	0x0246, r11	; 0x800246 <outputSum+0x3>
}
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	08 95       	ret

000007c0 <SetMode>:
		else if(outputSum < outMin) outputSum= outMin;
	}
}

void SetMode(int Mode)
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	int newAuto = (Mode == AUTOMATIC);
     7c4:	c1 e0       	ldi	r28, 0x01	; 1
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	91 05       	cpc	r25, r1
     7ca:	09 f0       	breq	.+2      	; 0x7ce <SetMode+0xe>
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
	if(newAuto && !inAuto)
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	39 f4       	brne	.+14     	; 0x7e2 <SetMode+0x22>
     7d4:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <inAuto>
     7d8:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <inAuto+0x1>
     7dc:	89 2b       	or	r24, r25
     7de:	09 f4       	brne	.+2      	; 0x7e2 <SetMode+0x22>
	{  /*we just went from manual to auto*/
		Initalize();
     7e0:	8f df       	rcall	.-226    	; 0x700 <Initalize>
	}
	inAuto = newAuto;
     7e2:	d0 93 54 02 	sts	0x0254, r29	; 0x800254 <inAuto+0x1>
     7e6:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <inAuto>
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <SetControllerDirection>:
	if(outputSum > outMax) outputSum = outMax;
	else if(outputSum < outMin) outputSum = outMin;
}

void SetControllerDirection(int Direction)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
	if(inAuto && Direction !=controllerDirection)
     7f6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <inAuto>
     7fa:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <inAuto+0x1>
     7fe:	89 2b       	or	r24, r25
     800:	09 f4       	brne	.+2      	; 0x804 <SetControllerDirection+0x14>
     802:	44 c0       	rjmp	.+136    	; 0x88c <SetControllerDirection+0x9c>
     804:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <controllerDirection>
     808:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <controllerDirection+0x1>
     80c:	8c 17       	cp	r24, r28
     80e:	9d 07       	cpc	r25, r29
     810:	09 f4       	brne	.+2      	; 0x814 <SetControllerDirection+0x24>
     812:	3c c0       	rjmp	.+120    	; 0x88c <SetControllerDirection+0x9c>
	{
		kp = (0 - kp);
     814:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <kp>
     818:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <kp+0x1>
     81c:	40 91 51 02 	lds	r20, 0x0251	; 0x800251 <kp+0x2>
     820:	50 91 52 02 	lds	r21, 0x0252	; 0x800252 <kp+0x3>
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	cb 01       	movw	r24, r22
     82a:	03 d3       	rcall	.+1542   	; 0xe32 <__subsf3>
     82c:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <kp>
     830:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <kp+0x1>
     834:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <kp+0x2>
     838:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <kp+0x3>
		ki = (0 - ki);
     83c:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <ki>
     840:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <ki+0x1>
     844:	40 91 31 02 	lds	r20, 0x0231	; 0x800231 <ki+0x2>
     848:	50 91 32 02 	lds	r21, 0x0232	; 0x800232 <ki+0x3>
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	cb 01       	movw	r24, r22
     852:	ef d2       	rcall	.+1502   	; 0xe32 <__subsf3>
     854:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <ki>
     858:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <ki+0x1>
     85c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ki+0x2>
     860:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ki+0x3>
		kd = (0 - kd);
     864:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <kd>
     868:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <kd+0x1>
     86c:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <kd+0x2>
     870:	50 91 12 02 	lds	r21, 0x0212	; 0x800212 <kd+0x3>
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	cb 01       	movw	r24, r22
     87a:	db d2       	rcall	.+1462   	; 0xe32 <__subsf3>
     87c:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <kd>
     880:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <kd+0x1>
     884:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <kd+0x2>
     888:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <kd+0x3>
	}
	controllerDirection = Direction;
     88c:	d0 93 2a 02 	sts	0x022A, r29	; 0x80022a <controllerDirection+0x1>
     890:	c0 93 29 02 	sts	0x0229, r28	; 0x800229 <controllerDirection>
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <PID>:
	
	analogWrite(13, Output);
}

void PID(double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
     89a:	4f 92       	push	r4
     89c:	5f 92       	push	r5
     89e:	6f 92       	push	r6
     8a0:	7f 92       	push	r7
     8a2:	af 92       	push	r10
     8a4:	bf 92       	push	r11
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	28 97       	sbiw	r28, 0x08	; 8
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	69 83       	std	Y+1, r22	; 0x01
     8c8:	7a 83       	std	Y+2, r23	; 0x02
     8ca:	8b 83       	std	Y+3, r24	; 0x03
     8cc:	9c 83       	std	Y+4, r25	; 0x04
     8ce:	29 01       	movw	r4, r18
     8d0:	3a 01       	movw	r6, r20
     8d2:	ed 82       	std	Y+5, r14	; 0x05
     8d4:	fe 82       	std	Y+6, r15	; 0x06
     8d6:	0f 83       	std	Y+7, r16	; 0x07
     8d8:	18 87       	std	Y+8, r17	; 0x08
	
	SetOutputLimits(0,255);
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	4f e7       	ldi	r20, 0x7F	; 127
     8e0:	53 e4       	ldi	r21, 0x43	; 67
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	cb 01       	movw	r24, r22
     8e8:	85 de       	rcall	.-758    	; 0x5f4 <SetOutputLimits>
	
	SampleTime = 100;
     8ea:	84 e6       	ldi	r24, 0x64	; 100
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	a0 e0       	ldi	r26, 0x00	; 0
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <SampleTime>
     8f6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <SampleTime+0x1>
     8fa:	a0 93 57 02 	sts	0x0257, r26	; 0x800257 <SampleTime+0x2>
     8fe:	b0 93 58 02 	sts	0x0258, r27	; 0x800258 <SampleTime+0x3>
	
	SetControllerDirection(ControllerDirection);
     902:	c5 01       	movw	r24, r10
     904:	75 df       	rcall	.-278    	; 0x7f0 <SetControllerDirection>
	SetTunings(Kp, Ki, Kd, POn);
     906:	ed 80       	ldd	r14, Y+5	; 0x05
     908:	fe 80       	ldd	r15, Y+6	; 0x06
     90a:	0f 81       	ldd	r16, Y+7	; 0x07
     90c:	18 85       	ldd	r17, Y+8	; 0x08
     90e:	a3 01       	movw	r20, r6
     910:	92 01       	movw	r18, r4
     912:	69 81       	ldd	r22, Y+1	; 0x01
     914:	7a 81       	ldd	r23, Y+2	; 0x02
     916:	8b 81       	ldd	r24, Y+3	; 0x03
     918:	9c 81       	ldd	r25, Y+4	; 0x04
	
	lastTime = millis()-SampleTime;
     91a:	a8 dd       	rcall	.-1200   	; 0x46c <SetTunings>
     91c:	7a d2       	rcall	.+1268   	; 0xe12 <millis>
     91e:	40 90 55 02 	lds	r4, 0x0255	; 0x800255 <SampleTime>
     922:	50 90 56 02 	lds	r5, 0x0256	; 0x800256 <SampleTime+0x1>
     926:	60 90 57 02 	lds	r6, 0x0257	; 0x800257 <SampleTime+0x2>
     92a:	70 90 58 02 	lds	r7, 0x0258	; 0x800258 <SampleTime+0x3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	84 19       	sub	r24, r4
     934:	95 09       	sbc	r25, r5
     936:	a6 09       	sbc	r26, r6
     938:	b7 09       	sbc	r27, r7
     93a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lastTime>
     93e:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <lastTime+0x1>
     942:	a0 93 37 02 	sts	0x0237, r26	; 0x800237 <lastTime+0x2>
     946:	b0 93 38 02 	sts	0x0238, r27	; 0x800238 <lastTime+0x3>
	
}
     94a:	28 96       	adiw	r28, 0x08	; 8
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	7f 90       	pop	r7
     96c:	6f 90       	pop	r6
     96e:	5f 90       	pop	r5
     970:	4f 90       	pop	r4
     972:	08 95       	ret

00000974 <analogRead>:
// 
int analogRead(int pin)
{
	uint8_t high;// low;
	
	if(pin==0)
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	21 f4       	brne	.+8      	; 0x980 <analogRead+0xc>
	{
		ADMUX = 0b01100000;
     978:	80 e6       	ldi	r24, 0x60	; 96
     97a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
     97e:	05 c0       	rjmp	.+10     	; 0x98a <analogRead+0x16>
	}
	else if(pin==2)
     980:	02 97       	sbiw	r24, 0x02	; 2
     982:	19 f4       	brne	.+6      	; 0x98a <analogRead+0x16>
	{
		ADMUX = 0b01100010;
     984:	82 e6       	ldi	r24, 0x62	; 98
     986:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	}
	ADCSRA = 0b10000011;
     98a:	ea e7       	ldi	r30, 0x7A	; 122
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	83 e8       	ldi	r24, 0x83	; 131
     990:	80 83       	st	Z, r24
	
	ADCSRB = 0b00000000;
     992:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	
	ADCSRA |= (1 << ADSC);
     996:	80 81       	ld	r24, Z
     998:	80 64       	ori	r24, 0x40	; 64
     99a:	80 83       	st	Z, r24
	
	while(BIT_IS_SET(ADCSRA, ADSC)) {}
     99c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     9a0:	86 fd       	sbrc	r24, 6
     9a2:	fc cf       	rjmp	.-8      	; 0x99c <analogRead+0x28>
	
	//low  = ADCL;
	high = ADCH;
     9a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	
	return (high);// >> 8) | low;
}
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret

000009ac <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	if(pin == 13)
     9ac:	8d 30       	cpi	r24, 0x0D	; 13
     9ae:	29 f4       	brne	.+10     	; 0x9ba <analogWrite+0xe>
	{
		TCCR0A = 0b10000001;
     9b0:	81 e8       	ldi	r24, 0x81	; 129
     9b2:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0b00000001;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	85 bd       	out	0x25, r24	; 37
		OCR0A = val;
     9b8:	67 bd       	out	0x27, r22	; 39
     9ba:	08 95       	ret

000009bc <map>:
	}

}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     9bc:	4f 92       	push	r4
     9be:	5f 92       	push	r5
     9c0:	6f 92       	push	r6
     9c2:	7f 92       	push	r7
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	29 01       	movw	r4, r18
     9de:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	24 19       	sub	r18, r4
     9e6:	35 09       	sbc	r19, r5
     9e8:	46 09       	sbc	r20, r6
     9ea:	57 09       	sbc	r21, r7
     9ec:	8a 89       	ldd	r24, Y+18	; 0x12
     9ee:	9b 89       	ldd	r25, Y+19	; 0x13
     9f0:	ac 89       	ldd	r26, Y+20	; 0x14
     9f2:	bd 89       	ldd	r27, Y+21	; 0x15
     9f4:	bc 01       	movw	r22, r24
     9f6:	cd 01       	movw	r24, r26
     9f8:	6a 19       	sub	r22, r10
     9fa:	7b 09       	sbc	r23, r11
     9fc:	8c 09       	sbc	r24, r12
     9fe:	9d 09       	sbc	r25, r13
     a00:	33 d4       	rcall	.+2150   	; 0x1268 <__mulsi3>
     a02:	a8 01       	movw	r20, r16
     a04:	97 01       	movw	r18, r14
     a06:	24 19       	sub	r18, r4
     a08:	35 09       	sbc	r19, r5
     a0a:	46 09       	sbc	r20, r6
     a0c:	57 09       	sbc	r21, r7
     a0e:	5d d4       	rcall	.+2234   	; 0x12ca <__divmodsi4>
     a10:	c6 01       	movw	r24, r12
     a12:	b5 01       	movw	r22, r10
     a14:	62 0f       	add	r22, r18
     a16:	73 1f       	adc	r23, r19
     a18:	84 1f       	adc	r24, r20
     a1a:	95 1f       	adc	r25, r21
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	bf 90       	pop	r11
     a2e:	af 90       	pop	r10
     a30:	7f 90       	pop	r7
     a32:	6f 90       	pop	r6
     a34:	5f 90       	pop	r5
     a36:	4f 90       	pop	r4
     a38:	08 95       	ret

00000a3a <Motor_Surucu_Init_Ports>:
{
	BRAKE_LIGHT_INIT_PORTS();
}

void Motor_Surucu_Init_Ports()
{
     a3a:	4f 92       	push	r4
     a3c:	5f 92       	push	r5
     a3e:	6f 92       	push	r6
     a40:	7f 92       	push	r7
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
	
	Motor_Speed_Pin();
     a56:	84 b1       	in	r24, 0x04	; 4
     a58:	80 68       	ori	r24, 0x80	; 128
     a5a:	84 b9       	out	0x04, r24	; 4
	
	// Application of Max and Min configuration value
	
	Motor_Speed_Pin_Signal();
     a5c:	85 b1       	in	r24, 0x05	; 5
     a5e:	80 68       	ori	r24, 0x80	; 128
     a60:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a62:	2f ef       	ldi	r18, 0xFF	; 255
     a64:	83 ed       	ldi	r24, 0xD3	; 211
     a66:	90 e3       	ldi	r25, 0x30	; 48
     a68:	21 50       	subi	r18, 0x01	; 1
     a6a:	80 40       	sbci	r24, 0x00	; 0
     a6c:	90 40       	sbci	r25, 0x00	; 0
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <Motor_Surucu_Init_Ports+0x2e>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <Motor_Surucu_Init_Ports+0x38>
     a72:	00 00       	nop
	
	_delay_ms(1000);
	
	TPS_Max = analogRead(2);
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	7d df       	rcall	.-262    	; 0x974 <analogRead>
     a7a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <TPS_Max+0x1>
     a7e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <TPS_Max>
	
	Motor_Speed_Pin_Non_Signal();
     a82:	85 b1       	in	r24, 0x05	; 5
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	85 b9       	out	0x05, r24	; 5
     a88:	2f ef       	ldi	r18, 0xFF	; 255
     a8a:	83 ed       	ldi	r24, 0xD3	; 211
     a8c:	90 e3       	ldi	r25, 0x30	; 48
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	80 40       	sbci	r24, 0x00	; 0
     a92:	90 40       	sbci	r25, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <Motor_Surucu_Init_Ports+0x54>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <Motor_Surucu_Init_Ports+0x5e>
     a98:	00 00       	nop
	
	_delay_ms(1000);
	
	TPS_Min = analogRead(2);
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	6a df       	rcall	.-300    	; 0x974 <analogRead>
     aa0:	ec 01       	movw	r28, r24
     aa2:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <TPS_Min+0x1>
     aa6:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <TPS_Min>
	
	
	TPS = map(analogRead(2), TPS_Min, TPS_Max, 0, 255);
     aaa:	40 90 33 02 	lds	r4, 0x0233	; 0x800233 <TPS_Max>
     aae:	50 90 34 02 	lds	r5, 0x0234	; 0x800234 <TPS_Max+0x1>
     ab2:	05 2c       	mov	r0, r5
     ab4:	00 0c       	add	r0, r0
     ab6:	66 08       	sbc	r6, r6
     ab8:	77 08       	sbc	r7, r7
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	5a df       	rcall	.-332    	; 0x974 <analogRead>
     ac0:	9e 01       	movw	r18, r28
     ac2:	dd 0f       	add	r29, r29
     ac4:	44 0b       	sbc	r20, r20
     ac6:	55 0b       	sbc	r21, r21
     ac8:	bc 01       	movw	r22, r24
     aca:	99 0f       	add	r25, r25
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	1f 92       	push	r1
     ad2:	1f 92       	push	r1
     ad4:	1f 92       	push	r1
     ad6:	cf ef       	ldi	r28, 0xFF	; 255
     ad8:	cf 93       	push	r28
     ada:	a1 2c       	mov	r10, r1
     adc:	b1 2c       	mov	r11, r1
     ade:	65 01       	movw	r12, r10
     ae0:	83 01       	movw	r16, r6
     ae2:	72 01       	movw	r14, r4
     ae4:	6b df       	rcall	.-298    	; 0x9bc <map>
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <TPS+0x1>
     af2:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <TPS>
	
	Input = TPS;
     af6:	07 2e       	mov	r0, r23
     af8:	00 0c       	add	r0, r0
     afa:	88 0b       	sbc	r24, r24
     afc:	99 0b       	sbc	r25, r25
     afe:	9d d2       	rcall	.+1338   	; 0x103a <__floatsisf>
     b00:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <Input>
     b04:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <Input+0x1>
     b08:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <Input+0x2>
     b0c:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <Input+0x3>
	
	Setpoint = map(analogRead(0), 18, 102, 0,255);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	2f df       	rcall	.-418    	; 0x974 <analogRead>
     b16:	bc 01       	movw	r22, r24
     b18:	99 0f       	add	r25, r25
     b1a:	88 0b       	sbc	r24, r24
     b1c:	99 0b       	sbc	r25, r25
     b1e:	1f 92       	push	r1
     b20:	1f 92       	push	r1
     b22:	1f 92       	push	r1
     b24:	cf 93       	push	r28
     b26:	16 e6       	ldi	r17, 0x66	; 102
     b28:	e1 2e       	mov	r14, r17
     b2a:	f1 2c       	mov	r15, r1
     b2c:	00 e0       	ldi	r16, 0x00	; 0
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	22 e1       	ldi	r18, 0x12	; 18
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	41 df       	rcall	.-382    	; 0x9bc <map>
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	7b d2       	rcall	.+1270   	; 0x103a <__floatsisf>
     b44:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <Setpoint>
     b48:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <Setpoint+0x1>
     b4c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Setpoint+0x2>
     b50:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Setpoint+0x3>
	
	PID(consKp, consKi, consKd, P_ON_E, DIRECT);
     b54:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     b58:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     b5c:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     b60:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     b64:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <consKi>
     b68:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <consKi+0x1>
     b6c:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <consKi+0x2>
     b70:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <consKi+0x3>
     b74:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <consKp>
     b78:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <consKp+0x1>
     b7c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <consKp+0x2>
     b80:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <consKp+0x3>
     b84:	cc 24       	eor	r12, r12
     b86:	c3 94       	inc	r12
     b88:	d1 2c       	mov	r13, r1
	
	SetMode(AUTOMATIC);
     b8a:	87 de       	rcall	.-754    	; 0x89a <PID>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	17 de       	rcall	.-978    	; 0x7c0 <SetMode>
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	08 95       	ret

00000bb0 <Throttle>:
		PORTA &= ~(1 << PINA4);
	}
}

void Throttle()
{
     bb0:	4f 92       	push	r4
     bb2:	5f 92       	push	r5
     bb4:	6f 92       	push	r6
     bb6:	7f 92       	push	r7
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <Throttle+0x1e>
     bce:	1f 92       	push	r1
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	TPS = map(analogRead(2), TPS_Min, TPS_Max, 0, 255);
     bd4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <TPS_Max>
     bd8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <TPS_Max+0x1>
     bdc:	9c 01       	movw	r18, r24
     bde:	99 0f       	add	r25, r25
     be0:	44 0b       	sbc	r20, r20
     be2:	55 0b       	sbc	r21, r21
     be4:	29 83       	std	Y+1, r18	; 0x01
     be6:	3a 83       	std	Y+2, r19	; 0x02
     be8:	4b 83       	std	Y+3, r20	; 0x03
     bea:	5c 83       	std	Y+4, r21	; 0x04
     bec:	40 90 59 02 	lds	r4, 0x0259	; 0x800259 <TPS_Min>
     bf0:	50 90 5a 02 	lds	r5, 0x025A	; 0x80025a <TPS_Min+0x1>
     bf4:	05 2c       	mov	r0, r5
     bf6:	00 0c       	add	r0, r0
     bf8:	66 08       	sbc	r6, r6
     bfa:	77 08       	sbc	r7, r7
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	b9 de       	rcall	.-654    	; 0x974 <analogRead>
     c02:	bc 01       	movw	r22, r24
     c04:	99 0f       	add	r25, r25
     c06:	88 0b       	sbc	r24, r24
     c08:	99 0b       	sbc	r25, r25
     c0a:	1f 92       	push	r1
     c0c:	1f 92       	push	r1
     c0e:	1f 92       	push	r1
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	3f 93       	push	r19
     c14:	a1 2c       	mov	r10, r1
     c16:	b1 2c       	mov	r11, r1
     c18:	65 01       	movw	r12, r10
     c1a:	e9 80       	ldd	r14, Y+1	; 0x01
     c1c:	fa 80       	ldd	r15, Y+2	; 0x02
     c1e:	0b 81       	ldd	r16, Y+3	; 0x03
     c20:	1c 81       	ldd	r17, Y+4	; 0x04
     c22:	a3 01       	movw	r20, r6
     c24:	92 01       	movw	r18, r4
     c26:	ca de       	rcall	.-620    	; 0x9bc <map>
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <TPS+0x1>
     c34:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <TPS>
	
	Input = TPS;
     c38:	07 2e       	mov	r0, r23
     c3a:	00 0c       	add	r0, r0
     c3c:	88 0b       	sbc	r24, r24
     c3e:	99 0b       	sbc	r25, r25
     c40:	fc d1       	rcall	.+1016   	; 0x103a <__floatsisf>
     c42:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <Input>
     c46:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <Input+0x1>
     c4a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <Input+0x2>
     c4e:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <Input+0x3>
	
	
	
	Setpoint = map(analogRead(0), 18, 102, 0, 255);
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	8e de       	rcall	.-740    	; 0x974 <analogRead>
     c58:	bc 01       	movw	r22, r24
     c5a:	99 0f       	add	r25, r25
     c5c:	88 0b       	sbc	r24, r24
     c5e:	99 0b       	sbc	r25, r25
     c60:	1f 92       	push	r1
     c62:	1f 92       	push	r1
     c64:	1f 92       	push	r1
     c66:	4f ef       	ldi	r20, 0xFF	; 255
     c68:	4f 93       	push	r20
     c6a:	16 e6       	ldi	r17, 0x66	; 102
     c6c:	e1 2e       	mov	r14, r17
     c6e:	f1 2c       	mov	r15, r1
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	22 e1       	ldi	r18, 0x12	; 18
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	9f de       	rcall	.-706    	; 0x9bc <map>
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	d9 d1       	rcall	.+946    	; 0x103a <__floatsisf>
     c88:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <Setpoint>
     c8c:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <Setpoint+0x1>
     c90:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Setpoint+0x2>
     c94:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Setpoint+0x3>
     c98:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	PID(consKp, consKi, consKd, P_ON_E, DIRECT);
     c9c:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ca0:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     ca4:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     ca8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <consKi>
     cac:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <consKi+0x1>
     cb0:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <consKi+0x2>
     cb4:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <consKi+0x3>
     cb8:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <consKp>
     cbc:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <consKp+0x1>
     cc0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <consKp+0x2>
     cc4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <consKp+0x3>
     cc8:	cc 24       	eor	r12, r12
     cca:	c3 94       	inc	r12
     ccc:	d1 2c       	mov	r13, r1
     cce:	e5 dd       	rcall	.-1078   	; 0x89a <PID>
     cd0:	c0 90 0d 02 	lds	r12, 0x020D	; 0x80020d <pOn>
	
	SetTunings(consKp, consKi, consKd, pOn);
     cd4:	d0 90 0e 02 	lds	r13, 0x020E	; 0x80020e <pOn+0x1>
     cd8:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     cdc:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     ce0:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     ce4:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     ce8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <consKi>
     cec:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <consKi+0x1>
     cf0:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <consKi+0x2>
     cf4:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <consKi+0x3>
     cf8:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <consKp>
     cfc:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <consKp+0x1>
     d00:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <consKp+0x2>
     d04:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <consKp+0x3>
     d08:	b1 db       	rcall	.-2206   	; 0x46c <SetTunings>
     d0a:	e0 90 00 02 	lds	r14, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	PID(consKp, consKi, consKd, P_ON_E, DIRECT);
     d0e:	f0 90 01 02 	lds	r15, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     d12:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     d16:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     d1a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <consKi>
     d1e:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <consKi+0x1>
     d22:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <consKi+0x2>
     d26:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <consKi+0x3>
     d2a:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <consKp>
     d2e:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <consKp+0x1>
     d32:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <consKp+0x2>
     d36:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <consKp+0x3>
     d3a:	cc 24       	eor	r12, r12
     d3c:	c3 94       	inc	r12
     d3e:	d1 2c       	mov	r13, r1
     d40:	ac dd       	rcall	.-1192   	; 0x89a <PID>
	
	Compute();
     d42:	13 da       	rcall	.-3034   	; 0x16a <Compute>
	
	
	analogWrite(13, Output);
     d44:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <Output>
     d48:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <Output+0x1>
     d4c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <Output+0x2>
     d50:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <Output+0x3>
     d54:	3f d1       	rcall	.+638    	; 0xfd4 <__fixsfsi>
     d56:	8d e0       	ldi	r24, 0x0D	; 13
     d58:	29 de       	rcall	.-942    	; 0x9ac <analogWrite>
     d5a:	0f 90       	pop	r0
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	cf 90       	pop	r12
     d72:	bf 90       	pop	r11
     d74:	af 90       	pop	r10
     d76:	7f 90       	pop	r7
     d78:	6f 90       	pop	r6
     d7a:	5f 90       	pop	r5
     d7c:	4f 90       	pop	r4
     d7e:	08 95       	ret

00000d80 <main>:
     d80:	60 e0       	ldi	r22, 0x00	; 0
void Ecu_Throttle_Init_Ports();
// 

int main(void)
{
    init_millis(16000000UL);
     d82:	74 e2       	ldi	r23, 0x24	; 36
     d84:	84 ef       	ldi	r24, 0xF4	; 244
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2c d0       	rcall	.+88     	; 0xde2 <init_millis>
    
    sei();
	
	BrakeLight_Init_Ports();
     d8a:	78 94       	sei
	Motor_Surucu_Init_Ports();
     d8c:	cc d9       	rcall	.-3176   	; 0x126 <BrakeLight_Init_Ports>
	
	
    while (1) 
    {
		Brake_Light();
     d8e:	55 de       	rcall	.-854    	; 0xa3a <Motor_Surucu_Init_Ports>
     d90:	d8 d9       	rcall	.-3152   	; 0x142 <Brake_Light>
		Throttle();
     d92:	0e df       	rcall	.-484    	; 0xbb0 <Throttle>
     d94:	d2 d9       	rcall	.-3164   	; 0x13a <Ecu_Throttle_Init_Ports>
		Ecu_Throttle_Init_Ports();
     d96:	fc cf       	rjmp	.-8      	; 0xd90 <main+0x10>

00000d98 <__vector_17>:
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
	timer1_millis++;
     daa:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer1_millis>
     dae:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer1_millis+0x1>
     db2:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer1_millis+0x2>
     db6:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer1_millis+0x3>
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	a1 1d       	adc	r26, r1
     dbe:	b1 1d       	adc	r27, r1
     dc0:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <timer1_millis>
     dc4:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <timer1_millis+0x1>
     dc8:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <timer1_millis+0x2>
     dcc:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <timer1_millis+0x3>
}
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <init_millis>:

void init_millis(unsigned long f_cpu)
{
	unsigned long ctc_match_overflow;
											   // Based on f_cpu=16000000ul
	ctc_match_overflow = ((f_cpu / 1000) / 8); // when timer1 is this value, 1ms has passed
     de2:	20 e4       	ldi	r18, 0x40	; 64
     de4:	3f e1       	ldi	r19, 0x1F	; 31
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	4d d2       	rcall	.+1178   	; 0x1286 <__udivmodsi4>

	// (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
	TCCR1B |= (1 << WGM12) | (1 << CS11);
     dec:	e1 e8       	ldi	r30, 0x81	; 129
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8a 60       	ori	r24, 0x0A	; 10
     df4:	80 83       	st	Z, r24

	// high byte first, then low byte
	OCR1AH = (ctc_match_overflow >> 8);
     df6:	bb 27       	eor	r27, r27
     df8:	a5 2f       	mov	r26, r21
     dfa:	94 2f       	mov	r25, r20
     dfc:	83 2f       	mov	r24, r19
     dfe:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
	OCR1AL = ctc_match_overflow;
     e02:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

	// Enable the compare match interrupt
	TIMSK1 |= (1 << OCIE1A);
     e06:	ef e6       	ldi	r30, 0x6F	; 111
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	80 83       	st	Z, r24
     e10:	08 95       	ret

00000e12 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e12:	f8 94       	cli
unsigned long millis (void)
{
	unsigned long millis_return;

	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) 
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <millis+0x18>
	{
		millis_return = timer1_millis;
     e18:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <timer1_millis>
     e1c:	70 91 2c 02 	lds	r23, 0x022C	; 0x80022c <timer1_millis+0x1>
     e20:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timer1_millis+0x2>
     e24:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <timer1_millis+0x3>
unsigned long millis (void)
{
	unsigned long millis_return;

	// Ensure this cannot be disrupted
	ATOMIC_BLOCK(ATOMIC_FORCEON) 
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	21 11       	cpse	r18, r1
     e2c:	f5 cf       	rjmp	.-22     	; 0xe18 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     e2e:	78 94       	sei
	{
		millis_return = timer1_millis;
	}
	return millis_return;
     e30:	08 95       	ret

00000e32 <__subsf3>:
     e32:	50 58       	subi	r21, 0x80	; 128

00000e34 <__addsf3>:
     e34:	bb 27       	eor	r27, r27
     e36:	aa 27       	eor	r26, r26
     e38:	0e d0       	rcall	.+28     	; 0xe56 <__addsf3x>
     e3a:	75 c1       	rjmp	.+746    	; 0x1126 <__fp_round>
     e3c:	66 d1       	rcall	.+716    	; 0x110a <__fp_pscA>
     e3e:	30 f0       	brcs	.+12     	; 0xe4c <__addsf3+0x18>
     e40:	6b d1       	rcall	.+726    	; 0x1118 <__fp_pscB>
     e42:	20 f0       	brcs	.+8      	; 0xe4c <__addsf3+0x18>
     e44:	31 f4       	brne	.+12     	; 0xe52 <__addsf3+0x1e>
     e46:	9f 3f       	cpi	r25, 0xFF	; 255
     e48:	11 f4       	brne	.+4      	; 0xe4e <__addsf3+0x1a>
     e4a:	1e f4       	brtc	.+6      	; 0xe52 <__addsf3+0x1e>
     e4c:	5b c1       	rjmp	.+694    	; 0x1104 <__fp_nan>
     e4e:	0e f4       	brtc	.+2      	; 0xe52 <__addsf3+0x1e>
     e50:	e0 95       	com	r30
     e52:	e7 fb       	bst	r30, 7
     e54:	51 c1       	rjmp	.+674    	; 0x10f8 <__fp_inf>

00000e56 <__addsf3x>:
     e56:	e9 2f       	mov	r30, r25
     e58:	77 d1       	rcall	.+750    	; 0x1148 <__fp_split3>
     e5a:	80 f3       	brcs	.-32     	; 0xe3c <__addsf3+0x8>
     e5c:	ba 17       	cp	r27, r26
     e5e:	62 07       	cpc	r22, r18
     e60:	73 07       	cpc	r23, r19
     e62:	84 07       	cpc	r24, r20
     e64:	95 07       	cpc	r25, r21
     e66:	18 f0       	brcs	.+6      	; 0xe6e <__addsf3x+0x18>
     e68:	71 f4       	brne	.+28     	; 0xe86 <__addsf3x+0x30>
     e6a:	9e f5       	brtc	.+102    	; 0xed2 <__addsf3x+0x7c>
     e6c:	8f c1       	rjmp	.+798    	; 0x118c <__fp_zero>
     e6e:	0e f4       	brtc	.+2      	; 0xe72 <__addsf3x+0x1c>
     e70:	e0 95       	com	r30
     e72:	0b 2e       	mov	r0, r27
     e74:	ba 2f       	mov	r27, r26
     e76:	a0 2d       	mov	r26, r0
     e78:	0b 01       	movw	r0, r22
     e7a:	b9 01       	movw	r22, r18
     e7c:	90 01       	movw	r18, r0
     e7e:	0c 01       	movw	r0, r24
     e80:	ca 01       	movw	r24, r20
     e82:	a0 01       	movw	r20, r0
     e84:	11 24       	eor	r1, r1
     e86:	ff 27       	eor	r31, r31
     e88:	59 1b       	sub	r21, r25
     e8a:	99 f0       	breq	.+38     	; 0xeb2 <__addsf3x+0x5c>
     e8c:	59 3f       	cpi	r21, 0xF9	; 249
     e8e:	50 f4       	brcc	.+20     	; 0xea4 <__addsf3x+0x4e>
     e90:	50 3e       	cpi	r21, 0xE0	; 224
     e92:	68 f1       	brcs	.+90     	; 0xeee <__addsf3x+0x98>
     e94:	1a 16       	cp	r1, r26
     e96:	f0 40       	sbci	r31, 0x00	; 0
     e98:	a2 2f       	mov	r26, r18
     e9a:	23 2f       	mov	r18, r19
     e9c:	34 2f       	mov	r19, r20
     e9e:	44 27       	eor	r20, r20
     ea0:	58 5f       	subi	r21, 0xF8	; 248
     ea2:	f3 cf       	rjmp	.-26     	; 0xe8a <__addsf3x+0x34>
     ea4:	46 95       	lsr	r20
     ea6:	37 95       	ror	r19
     ea8:	27 95       	ror	r18
     eaa:	a7 95       	ror	r26
     eac:	f0 40       	sbci	r31, 0x00	; 0
     eae:	53 95       	inc	r21
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <__addsf3x+0x4e>
     eb2:	7e f4       	brtc	.+30     	; 0xed2 <__addsf3x+0x7c>
     eb4:	1f 16       	cp	r1, r31
     eb6:	ba 0b       	sbc	r27, r26
     eb8:	62 0b       	sbc	r22, r18
     eba:	73 0b       	sbc	r23, r19
     ebc:	84 0b       	sbc	r24, r20
     ebe:	ba f0       	brmi	.+46     	; 0xeee <__addsf3x+0x98>
     ec0:	91 50       	subi	r25, 0x01	; 1
     ec2:	a1 f0       	breq	.+40     	; 0xeec <__addsf3x+0x96>
     ec4:	ff 0f       	add	r31, r31
     ec6:	bb 1f       	adc	r27, r27
     ec8:	66 1f       	adc	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	c2 f7       	brpl	.-16     	; 0xec0 <__addsf3x+0x6a>
     ed0:	0e c0       	rjmp	.+28     	; 0xeee <__addsf3x+0x98>
     ed2:	ba 0f       	add	r27, r26
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 1f       	adc	r23, r19
     ed8:	84 1f       	adc	r24, r20
     eda:	48 f4       	brcc	.+18     	; 0xeee <__addsf3x+0x98>
     edc:	87 95       	ror	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f7 95       	ror	r31
     ee6:	9e 3f       	cpi	r25, 0xFE	; 254
     ee8:	08 f0       	brcs	.+2      	; 0xeec <__addsf3x+0x96>
     eea:	b3 cf       	rjmp	.-154    	; 0xe52 <__addsf3+0x1e>
     eec:	93 95       	inc	r25
     eee:	88 0f       	add	r24, r24
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <__addsf3x+0x9e>
     ef2:	99 27       	eor	r25, r25
     ef4:	ee 0f       	add	r30, r30
     ef6:	97 95       	ror	r25
     ef8:	87 95       	ror	r24
     efa:	08 95       	ret

00000efc <__cmpsf2>:
     efc:	d9 d0       	rcall	.+434    	; 0x10b0 <__fp_cmp>
     efe:	08 f4       	brcc	.+2      	; 0xf02 <__cmpsf2+0x6>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	08 95       	ret

00000f04 <__divsf3>:
     f04:	0c d0       	rcall	.+24     	; 0xf1e <__divsf3x>
     f06:	0f c1       	rjmp	.+542    	; 0x1126 <__fp_round>
     f08:	07 d1       	rcall	.+526    	; 0x1118 <__fp_pscB>
     f0a:	40 f0       	brcs	.+16     	; 0xf1c <__divsf3+0x18>
     f0c:	fe d0       	rcall	.+508    	; 0x110a <__fp_pscA>
     f0e:	30 f0       	brcs	.+12     	; 0xf1c <__divsf3+0x18>
     f10:	21 f4       	brne	.+8      	; 0xf1a <__divsf3+0x16>
     f12:	5f 3f       	cpi	r21, 0xFF	; 255
     f14:	19 f0       	breq	.+6      	; 0xf1c <__divsf3+0x18>
     f16:	f0 c0       	rjmp	.+480    	; 0x10f8 <__fp_inf>
     f18:	51 11       	cpse	r21, r1
     f1a:	39 c1       	rjmp	.+626    	; 0x118e <__fp_szero>
     f1c:	f3 c0       	rjmp	.+486    	; 0x1104 <__fp_nan>

00000f1e <__divsf3x>:
     f1e:	14 d1       	rcall	.+552    	; 0x1148 <__fp_split3>
     f20:	98 f3       	brcs	.-26     	; 0xf08 <__divsf3+0x4>

00000f22 <__divsf3_pse>:
     f22:	99 23       	and	r25, r25
     f24:	c9 f3       	breq	.-14     	; 0xf18 <__divsf3+0x14>
     f26:	55 23       	and	r21, r21
     f28:	b1 f3       	breq	.-20     	; 0xf16 <__divsf3+0x12>
     f2a:	95 1b       	sub	r25, r21
     f2c:	55 0b       	sbc	r21, r21
     f2e:	bb 27       	eor	r27, r27
     f30:	aa 27       	eor	r26, r26
     f32:	62 17       	cp	r22, r18
     f34:	73 07       	cpc	r23, r19
     f36:	84 07       	cpc	r24, r20
     f38:	38 f0       	brcs	.+14     	; 0xf48 <__divsf3_pse+0x26>
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	44 1f       	adc	r20, r20
     f44:	aa 1f       	adc	r26, r26
     f46:	a9 f3       	breq	.-22     	; 0xf32 <__divsf3_pse+0x10>
     f48:	33 d0       	rcall	.+102    	; 0xfb0 <__divsf3_pse+0x8e>
     f4a:	0e 2e       	mov	r0, r30
     f4c:	3a f0       	brmi	.+14     	; 0xf5c <__divsf3_pse+0x3a>
     f4e:	e0 e8       	ldi	r30, 0x80	; 128
     f50:	30 d0       	rcall	.+96     	; 0xfb2 <__divsf3_pse+0x90>
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	50 40       	sbci	r21, 0x00	; 0
     f56:	e6 95       	lsr	r30
     f58:	00 1c       	adc	r0, r0
     f5a:	ca f7       	brpl	.-14     	; 0xf4e <__divsf3_pse+0x2c>
     f5c:	29 d0       	rcall	.+82     	; 0xfb0 <__divsf3_pse+0x8e>
     f5e:	fe 2f       	mov	r31, r30
     f60:	27 d0       	rcall	.+78     	; 0xfb0 <__divsf3_pse+0x8e>
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	88 1f       	adc	r24, r24
     f68:	bb 1f       	adc	r27, r27
     f6a:	26 17       	cp	r18, r22
     f6c:	37 07       	cpc	r19, r23
     f6e:	48 07       	cpc	r20, r24
     f70:	ab 07       	cpc	r26, r27
     f72:	b0 e8       	ldi	r27, 0x80	; 128
     f74:	09 f0       	breq	.+2      	; 0xf78 <__divsf3_pse+0x56>
     f76:	bb 0b       	sbc	r27, r27
     f78:	80 2d       	mov	r24, r0
     f7a:	bf 01       	movw	r22, r30
     f7c:	ff 27       	eor	r31, r31
     f7e:	93 58       	subi	r25, 0x83	; 131
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	2a f0       	brmi	.+10     	; 0xf8e <__divsf3_pse+0x6c>
     f84:	9e 3f       	cpi	r25, 0xFE	; 254
     f86:	51 05       	cpc	r21, r1
     f88:	68 f0       	brcs	.+26     	; 0xfa4 <__divsf3_pse+0x82>
     f8a:	b6 c0       	rjmp	.+364    	; 0x10f8 <__fp_inf>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__fp_szero>
     f8e:	5f 3f       	cpi	r21, 0xFF	; 255
     f90:	ec f3       	brlt	.-6      	; 0xf8c <__divsf3_pse+0x6a>
     f92:	98 3e       	cpi	r25, 0xE8	; 232
     f94:	dc f3       	brlt	.-10     	; 0xf8c <__divsf3_pse+0x6a>
     f96:	86 95       	lsr	r24
     f98:	77 95       	ror	r23
     f9a:	67 95       	ror	r22
     f9c:	b7 95       	ror	r27
     f9e:	f7 95       	ror	r31
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	c9 f7       	brne	.-14     	; 0xf96 <__divsf3_pse+0x74>
     fa4:	88 0f       	add	r24, r24
     fa6:	91 1d       	adc	r25, r1
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	97 f9       	bld	r25, 7
     fae:	08 95       	ret
     fb0:	e1 e0       	ldi	r30, 0x01	; 1
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	bb 1f       	adc	r27, r27
     fba:	62 17       	cp	r22, r18
     fbc:	73 07       	cpc	r23, r19
     fbe:	84 07       	cpc	r24, r20
     fc0:	ba 07       	cpc	r27, r26
     fc2:	20 f0       	brcs	.+8      	; 0xfcc <__divsf3_pse+0xaa>
     fc4:	62 1b       	sub	r22, r18
     fc6:	73 0b       	sbc	r23, r19
     fc8:	84 0b       	sbc	r24, r20
     fca:	ba 0b       	sbc	r27, r26
     fcc:	ee 1f       	adc	r30, r30
     fce:	88 f7       	brcc	.-30     	; 0xfb2 <__divsf3_pse+0x90>
     fd0:	e0 95       	com	r30
     fd2:	08 95       	ret

00000fd4 <__fixsfsi>:
     fd4:	04 d0       	rcall	.+8      	; 0xfde <__fixunssfsi>
     fd6:	68 94       	set
     fd8:	b1 11       	cpse	r27, r1
     fda:	d9 c0       	rjmp	.+434    	; 0x118e <__fp_szero>
     fdc:	08 95       	ret

00000fde <__fixunssfsi>:
     fde:	bc d0       	rcall	.+376    	; 0x1158 <__fp_splitA>
     fe0:	88 f0       	brcs	.+34     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     fe2:	9f 57       	subi	r25, 0x7F	; 127
     fe4:	90 f0       	brcs	.+36     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fe6:	b9 2f       	mov	r27, r25
     fe8:	99 27       	eor	r25, r25
     fea:	b7 51       	subi	r27, 0x17	; 23
     fec:	a0 f0       	brcs	.+40     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fee:	d1 f0       	breq	.+52     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	1a f0       	brmi	.+6      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffa:	ba 95       	dec	r27
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__fixunssfsi+0x12>
     ffe:	12 c0       	rjmp	.+36     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1000:	b1 30       	cpi	r27, 0x01	; 1
    1002:	81 f0       	breq	.+32     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1004:	c3 d0       	rcall	.+390    	; 0x118c <__fp_zero>
    1006:	b1 e0       	ldi	r27, 0x01	; 1
    1008:	08 95       	ret
    100a:	c0 c0       	rjmp	.+384    	; 0x118c <__fp_zero>
    100c:	67 2f       	mov	r22, r23
    100e:	78 2f       	mov	r23, r24
    1010:	88 27       	eor	r24, r24
    1012:	b8 5f       	subi	r27, 0xF8	; 248
    1014:	39 f0       	breq	.+14     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1016:	b9 3f       	cpi	r27, 0xF9	; 249
    1018:	cc f3       	brlt	.-14     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    101a:	86 95       	lsr	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b3 95       	inc	r27
    1022:	d9 f7       	brne	.-10     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1024:	3e f4       	brtc	.+14     	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    1026:	90 95       	com	r25
    1028:	80 95       	com	r24
    102a:	70 95       	com	r23
    102c:	61 95       	neg	r22
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	08 95       	ret

00001036 <__floatunsisf>:
    1036:	e8 94       	clt
    1038:	09 c0       	rjmp	.+18     	; 0x104c <__floatsisf+0x12>

0000103a <__floatsisf>:
    103a:	97 fb       	bst	r25, 7
    103c:	3e f4       	brtc	.+14     	; 0x104c <__floatsisf+0x12>
    103e:	90 95       	com	r25
    1040:	80 95       	com	r24
    1042:	70 95       	com	r23
    1044:	61 95       	neg	r22
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	99 23       	and	r25, r25
    104e:	a9 f0       	breq	.+42     	; 0x107a <__floatsisf+0x40>
    1050:	f9 2f       	mov	r31, r25
    1052:	96 e9       	ldi	r25, 0x96	; 150
    1054:	bb 27       	eor	r27, r27
    1056:	93 95       	inc	r25
    1058:	f6 95       	lsr	r31
    105a:	87 95       	ror	r24
    105c:	77 95       	ror	r23
    105e:	67 95       	ror	r22
    1060:	b7 95       	ror	r27
    1062:	f1 11       	cpse	r31, r1
    1064:	f8 cf       	rjmp	.-16     	; 0x1056 <__floatsisf+0x1c>
    1066:	fa f4       	brpl	.+62     	; 0x10a6 <__floatsisf+0x6c>
    1068:	bb 0f       	add	r27, r27
    106a:	11 f4       	brne	.+4      	; 0x1070 <__floatsisf+0x36>
    106c:	60 ff       	sbrs	r22, 0
    106e:	1b c0       	rjmp	.+54     	; 0x10a6 <__floatsisf+0x6c>
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	16 c0       	rjmp	.+44     	; 0x10a6 <__floatsisf+0x6c>
    107a:	88 23       	and	r24, r24
    107c:	11 f0       	breq	.+4      	; 0x1082 <__floatsisf+0x48>
    107e:	96 e9       	ldi	r25, 0x96	; 150
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <__floatsisf+0x6a>
    1082:	77 23       	and	r23, r23
    1084:	21 f0       	breq	.+8      	; 0x108e <__floatsisf+0x54>
    1086:	9e e8       	ldi	r25, 0x8E	; 142
    1088:	87 2f       	mov	r24, r23
    108a:	76 2f       	mov	r23, r22
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <__floatsisf+0x5e>
    108e:	66 23       	and	r22, r22
    1090:	71 f0       	breq	.+28     	; 0x10ae <__floatsisf+0x74>
    1092:	96 e8       	ldi	r25, 0x86	; 134
    1094:	86 2f       	mov	r24, r22
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	2a f0       	brmi	.+10     	; 0x10a6 <__floatsisf+0x6c>
    109c:	9a 95       	dec	r25
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	da f7       	brpl	.-10     	; 0x109c <__floatsisf+0x62>
    10a6:	88 0f       	add	r24, r24
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <__fp_cmp>:
    10b0:	99 0f       	add	r25, r25
    10b2:	00 08       	sbc	r0, r0
    10b4:	55 0f       	add	r21, r21
    10b6:	aa 0b       	sbc	r26, r26
    10b8:	e0 e8       	ldi	r30, 0x80	; 128
    10ba:	fe ef       	ldi	r31, 0xFE	; 254
    10bc:	16 16       	cp	r1, r22
    10be:	17 06       	cpc	r1, r23
    10c0:	e8 07       	cpc	r30, r24
    10c2:	f9 07       	cpc	r31, r25
    10c4:	c0 f0       	brcs	.+48     	; 0x10f6 <__fp_cmp+0x46>
    10c6:	12 16       	cp	r1, r18
    10c8:	13 06       	cpc	r1, r19
    10ca:	e4 07       	cpc	r30, r20
    10cc:	f5 07       	cpc	r31, r21
    10ce:	98 f0       	brcs	.+38     	; 0x10f6 <__fp_cmp+0x46>
    10d0:	62 1b       	sub	r22, r18
    10d2:	73 0b       	sbc	r23, r19
    10d4:	84 0b       	sbc	r24, r20
    10d6:	95 0b       	sbc	r25, r21
    10d8:	39 f4       	brne	.+14     	; 0x10e8 <__fp_cmp+0x38>
    10da:	0a 26       	eor	r0, r26
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <__fp_cmp+0x46>
    10de:	23 2b       	or	r18, r19
    10e0:	24 2b       	or	r18, r20
    10e2:	25 2b       	or	r18, r21
    10e4:	21 f4       	brne	.+8      	; 0x10ee <__fp_cmp+0x3e>
    10e6:	08 95       	ret
    10e8:	0a 26       	eor	r0, r26
    10ea:	09 f4       	brne	.+2      	; 0x10ee <__fp_cmp+0x3e>
    10ec:	a1 40       	sbci	r26, 0x01	; 1
    10ee:	a6 95       	lsr	r26
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	81 1d       	adc	r24, r1
    10f4:	81 1d       	adc	r24, r1
    10f6:	08 95       	ret

000010f8 <__fp_inf>:
    10f8:	97 f9       	bld	r25, 7
    10fa:	9f 67       	ori	r25, 0x7F	; 127
    10fc:	80 e8       	ldi	r24, 0x80	; 128
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	08 95       	ret

00001104 <__fp_nan>:
    1104:	9f ef       	ldi	r25, 0xFF	; 255
    1106:	80 ec       	ldi	r24, 0xC0	; 192
    1108:	08 95       	ret

0000110a <__fp_pscA>:
    110a:	00 24       	eor	r0, r0
    110c:	0a 94       	dec	r0
    110e:	16 16       	cp	r1, r22
    1110:	17 06       	cpc	r1, r23
    1112:	18 06       	cpc	r1, r24
    1114:	09 06       	cpc	r0, r25
    1116:	08 95       	ret

00001118 <__fp_pscB>:
    1118:	00 24       	eor	r0, r0
    111a:	0a 94       	dec	r0
    111c:	12 16       	cp	r1, r18
    111e:	13 06       	cpc	r1, r19
    1120:	14 06       	cpc	r1, r20
    1122:	05 06       	cpc	r0, r21
    1124:	08 95       	ret

00001126 <__fp_round>:
    1126:	09 2e       	mov	r0, r25
    1128:	03 94       	inc	r0
    112a:	00 0c       	add	r0, r0
    112c:	11 f4       	brne	.+4      	; 0x1132 <__fp_round+0xc>
    112e:	88 23       	and	r24, r24
    1130:	52 f0       	brmi	.+20     	; 0x1146 <__fp_round+0x20>
    1132:	bb 0f       	add	r27, r27
    1134:	40 f4       	brcc	.+16     	; 0x1146 <__fp_round+0x20>
    1136:	bf 2b       	or	r27, r31
    1138:	11 f4       	brne	.+4      	; 0x113e <__fp_round+0x18>
    113a:	60 ff       	sbrs	r22, 0
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <__fp_round+0x20>
    113e:	6f 5f       	subi	r22, 0xFF	; 255
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	8f 4f       	sbci	r24, 0xFF	; 255
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	08 95       	ret

00001148 <__fp_split3>:
    1148:	57 fd       	sbrc	r21, 7
    114a:	90 58       	subi	r25, 0x80	; 128
    114c:	44 0f       	add	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	59 f0       	breq	.+22     	; 0x1168 <__fp_splitA+0x10>
    1152:	5f 3f       	cpi	r21, 0xFF	; 255
    1154:	71 f0       	breq	.+28     	; 0x1172 <__fp_splitA+0x1a>
    1156:	47 95       	ror	r20

00001158 <__fp_splitA>:
    1158:	88 0f       	add	r24, r24
    115a:	97 fb       	bst	r25, 7
    115c:	99 1f       	adc	r25, r25
    115e:	61 f0       	breq	.+24     	; 0x1178 <__fp_splitA+0x20>
    1160:	9f 3f       	cpi	r25, 0xFF	; 255
    1162:	79 f0       	breq	.+30     	; 0x1182 <__fp_splitA+0x2a>
    1164:	87 95       	ror	r24
    1166:	08 95       	ret
    1168:	12 16       	cp	r1, r18
    116a:	13 06       	cpc	r1, r19
    116c:	14 06       	cpc	r1, r20
    116e:	55 1f       	adc	r21, r21
    1170:	f2 cf       	rjmp	.-28     	; 0x1156 <__fp_split3+0xe>
    1172:	46 95       	lsr	r20
    1174:	f1 df       	rcall	.-30     	; 0x1158 <__fp_splitA>
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <__fp_splitA+0x30>
    1178:	16 16       	cp	r1, r22
    117a:	17 06       	cpc	r1, r23
    117c:	18 06       	cpc	r1, r24
    117e:	99 1f       	adc	r25, r25
    1180:	f1 cf       	rjmp	.-30     	; 0x1164 <__fp_splitA+0xc>
    1182:	86 95       	lsr	r24
    1184:	71 05       	cpc	r23, r1
    1186:	61 05       	cpc	r22, r1
    1188:	08 94       	sec
    118a:	08 95       	ret

0000118c <__fp_zero>:
    118c:	e8 94       	clt

0000118e <__fp_szero>:
    118e:	bb 27       	eor	r27, r27
    1190:	66 27       	eor	r22, r22
    1192:	77 27       	eor	r23, r23
    1194:	cb 01       	movw	r24, r22
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret

0000119a <__gesf2>:
    119a:	8a df       	rcall	.-236    	; 0x10b0 <__fp_cmp>
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <__gesf2+0x6>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	08 95       	ret

000011a2 <__mulsf3>:
    11a2:	0b d0       	rcall	.+22     	; 0x11ba <__mulsf3x>
    11a4:	c0 cf       	rjmp	.-128    	; 0x1126 <__fp_round>
    11a6:	b1 df       	rcall	.-158    	; 0x110a <__fp_pscA>
    11a8:	28 f0       	brcs	.+10     	; 0x11b4 <__mulsf3+0x12>
    11aa:	b6 df       	rcall	.-148    	; 0x1118 <__fp_pscB>
    11ac:	18 f0       	brcs	.+6      	; 0x11b4 <__mulsf3+0x12>
    11ae:	95 23       	and	r25, r21
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__mulsf3+0x12>
    11b2:	a2 cf       	rjmp	.-188    	; 0x10f8 <__fp_inf>
    11b4:	a7 cf       	rjmp	.-178    	; 0x1104 <__fp_nan>
    11b6:	11 24       	eor	r1, r1
    11b8:	ea cf       	rjmp	.-44     	; 0x118e <__fp_szero>

000011ba <__mulsf3x>:
    11ba:	c6 df       	rcall	.-116    	; 0x1148 <__fp_split3>
    11bc:	a0 f3       	brcs	.-24     	; 0x11a6 <__mulsf3+0x4>

000011be <__mulsf3_pse>:
    11be:	95 9f       	mul	r25, r21
    11c0:	d1 f3       	breq	.-12     	; 0x11b6 <__mulsf3+0x14>
    11c2:	95 0f       	add	r25, r21
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	55 1f       	adc	r21, r21
    11c8:	62 9f       	mul	r22, r18
    11ca:	f0 01       	movw	r30, r0
    11cc:	72 9f       	mul	r23, r18
    11ce:	bb 27       	eor	r27, r27
    11d0:	f0 0d       	add	r31, r0
    11d2:	b1 1d       	adc	r27, r1
    11d4:	63 9f       	mul	r22, r19
    11d6:	aa 27       	eor	r26, r26
    11d8:	f0 0d       	add	r31, r0
    11da:	b1 1d       	adc	r27, r1
    11dc:	aa 1f       	adc	r26, r26
    11de:	64 9f       	mul	r22, r20
    11e0:	66 27       	eor	r22, r22
    11e2:	b0 0d       	add	r27, r0
    11e4:	a1 1d       	adc	r26, r1
    11e6:	66 1f       	adc	r22, r22
    11e8:	82 9f       	mul	r24, r18
    11ea:	22 27       	eor	r18, r18
    11ec:	b0 0d       	add	r27, r0
    11ee:	a1 1d       	adc	r26, r1
    11f0:	62 1f       	adc	r22, r18
    11f2:	73 9f       	mul	r23, r19
    11f4:	b0 0d       	add	r27, r0
    11f6:	a1 1d       	adc	r26, r1
    11f8:	62 1f       	adc	r22, r18
    11fa:	83 9f       	mul	r24, r19
    11fc:	a0 0d       	add	r26, r0
    11fe:	61 1d       	adc	r22, r1
    1200:	22 1f       	adc	r18, r18
    1202:	74 9f       	mul	r23, r20
    1204:	33 27       	eor	r19, r19
    1206:	a0 0d       	add	r26, r0
    1208:	61 1d       	adc	r22, r1
    120a:	23 1f       	adc	r18, r19
    120c:	84 9f       	mul	r24, r20
    120e:	60 0d       	add	r22, r0
    1210:	21 1d       	adc	r18, r1
    1212:	82 2f       	mov	r24, r18
    1214:	76 2f       	mov	r23, r22
    1216:	6a 2f       	mov	r22, r26
    1218:	11 24       	eor	r1, r1
    121a:	9f 57       	subi	r25, 0x7F	; 127
    121c:	50 40       	sbci	r21, 0x00	; 0
    121e:	8a f0       	brmi	.+34     	; 0x1242 <__mulsf3_pse+0x84>
    1220:	e1 f0       	breq	.+56     	; 0x125a <__mulsf3_pse+0x9c>
    1222:	88 23       	and	r24, r24
    1224:	4a f0       	brmi	.+18     	; 0x1238 <__mulsf3_pse+0x7a>
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	bb 1f       	adc	r27, r27
    122c:	66 1f       	adc	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	91 50       	subi	r25, 0x01	; 1
    1234:	50 40       	sbci	r21, 0x00	; 0
    1236:	a9 f7       	brne	.-22     	; 0x1222 <__mulsf3_pse+0x64>
    1238:	9e 3f       	cpi	r25, 0xFE	; 254
    123a:	51 05       	cpc	r21, r1
    123c:	70 f0       	brcs	.+28     	; 0x125a <__mulsf3_pse+0x9c>
    123e:	5c cf       	rjmp	.-328    	; 0x10f8 <__fp_inf>
    1240:	a6 cf       	rjmp	.-180    	; 0x118e <__fp_szero>
    1242:	5f 3f       	cpi	r21, 0xFF	; 255
    1244:	ec f3       	brlt	.-6      	; 0x1240 <__mulsf3_pse+0x82>
    1246:	98 3e       	cpi	r25, 0xE8	; 232
    1248:	dc f3       	brlt	.-10     	; 0x1240 <__mulsf3_pse+0x82>
    124a:	86 95       	lsr	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	b7 95       	ror	r27
    1252:	f7 95       	ror	r31
    1254:	e7 95       	ror	r30
    1256:	9f 5f       	subi	r25, 0xFF	; 255
    1258:	c1 f7       	brne	.-16     	; 0x124a <__mulsf3_pse+0x8c>
    125a:	fe 2b       	or	r31, r30
    125c:	88 0f       	add	r24, r24
    125e:	91 1d       	adc	r25, r1
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret

00001268 <__mulsi3>:
    1268:	db 01       	movw	r26, r22
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	49 d0       	rcall	.+146    	; 0x1302 <__muluhisi3>
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	a2 9f       	mul	r26, r18
    1276:	80 0d       	add	r24, r0
    1278:	91 1d       	adc	r25, r1
    127a:	a3 9f       	mul	r26, r19
    127c:	90 0d       	add	r25, r0
    127e:	b2 9f       	mul	r27, r18
    1280:	90 0d       	add	r25, r0
    1282:	11 24       	eor	r1, r1
    1284:	08 95       	ret

00001286 <__udivmodsi4>:
    1286:	a1 e2       	ldi	r26, 0x21	; 33
    1288:	1a 2e       	mov	r1, r26
    128a:	aa 1b       	sub	r26, r26
    128c:	bb 1b       	sub	r27, r27
    128e:	fd 01       	movw	r30, r26
    1290:	0d c0       	rjmp	.+26     	; 0x12ac <__udivmodsi4_ep>

00001292 <__udivmodsi4_loop>:
    1292:	aa 1f       	adc	r26, r26
    1294:	bb 1f       	adc	r27, r27
    1296:	ee 1f       	adc	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	a2 17       	cp	r26, r18
    129c:	b3 07       	cpc	r27, r19
    129e:	e4 07       	cpc	r30, r20
    12a0:	f5 07       	cpc	r31, r21
    12a2:	20 f0       	brcs	.+8      	; 0x12ac <__udivmodsi4_ep>
    12a4:	a2 1b       	sub	r26, r18
    12a6:	b3 0b       	sbc	r27, r19
    12a8:	e4 0b       	sbc	r30, r20
    12aa:	f5 0b       	sbc	r31, r21

000012ac <__udivmodsi4_ep>:
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	1a 94       	dec	r1
    12b6:	69 f7       	brne	.-38     	; 0x1292 <__udivmodsi4_loop>
    12b8:	60 95       	com	r22
    12ba:	70 95       	com	r23
    12bc:	80 95       	com	r24
    12be:	90 95       	com	r25
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	bd 01       	movw	r22, r26
    12c6:	cf 01       	movw	r24, r30
    12c8:	08 95       	ret

000012ca <__divmodsi4>:
    12ca:	05 2e       	mov	r0, r21
    12cc:	97 fb       	bst	r25, 7
    12ce:	16 f4       	brtc	.+4      	; 0x12d4 <__divmodsi4+0xa>
    12d0:	00 94       	com	r0
    12d2:	0f d0       	rcall	.+30     	; 0x12f2 <__negsi2>
    12d4:	57 fd       	sbrc	r21, 7
    12d6:	05 d0       	rcall	.+10     	; 0x12e2 <__divmodsi4_neg2>
    12d8:	d6 df       	rcall	.-84     	; 0x1286 <__udivmodsi4>
    12da:	07 fc       	sbrc	r0, 7
    12dc:	02 d0       	rcall	.+4      	; 0x12e2 <__divmodsi4_neg2>
    12de:	46 f4       	brtc	.+16     	; 0x12f0 <__divmodsi4_exit>
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__negsi2>

000012e2 <__divmodsi4_neg2>:
    12e2:	50 95       	com	r21
    12e4:	40 95       	com	r20
    12e6:	30 95       	com	r19
    12e8:	21 95       	neg	r18
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	4f 4f       	sbci	r20, 0xFF	; 255
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255

000012f0 <__divmodsi4_exit>:
    12f0:	08 95       	ret

000012f2 <__negsi2>:
    12f2:	90 95       	com	r25
    12f4:	80 95       	com	r24
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	08 95       	ret

00001302 <__muluhisi3>:
    1302:	09 d0       	rcall	.+18     	; 0x1316 <__umulhisi3>
    1304:	a5 9f       	mul	r26, r21
    1306:	90 0d       	add	r25, r0
    1308:	b4 9f       	mul	r27, r20
    130a:	90 0d       	add	r25, r0
    130c:	a4 9f       	mul	r26, r20
    130e:	80 0d       	add	r24, r0
    1310:	91 1d       	adc	r25, r1
    1312:	11 24       	eor	r1, r1
    1314:	08 95       	ret

00001316 <__umulhisi3>:
    1316:	a2 9f       	mul	r26, r18
    1318:	b0 01       	movw	r22, r0
    131a:	b3 9f       	mul	r27, r19
    131c:	c0 01       	movw	r24, r0
    131e:	a3 9f       	mul	r26, r19
    1320:	70 0d       	add	r23, r0
    1322:	81 1d       	adc	r24, r1
    1324:	11 24       	eor	r1, r1
    1326:	91 1d       	adc	r25, r1
    1328:	b2 9f       	mul	r27, r18
    132a:	70 0d       	add	r23, r0
    132c:	81 1d       	adc	r24, r1
    132e:	11 24       	eor	r1, r1
    1330:	91 1d       	adc	r25, r1
    1332:	08 95       	ret

00001334 <_exit>:
    1334:	f8 94       	cli

00001336 <__stop_program>:
    1336:	ff cf       	rjmp	.-2      	; 0x1336 <__stop_program>
